import com.android.build.gradle.LibraryPlugin
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.orhanobut.tracklytics'


buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.1.1"
    classpath 'com.orhanobut.tracklytics:tracklytics-plugin:1.3.5'
  }
}

repositories {
  mavenCentral()

  // NOTE: This is only needed when developing the plugin!
  mavenLocal()
}

assemble.doLast {
  print "heheh"
}

android {
  compileSdkVersion 25
  buildToolsVersion "25.0.2"

  defaultConfig {
    applicationId "com.orhanobut.sample"
    minSdkVersion 16
    targetSdkVersion 25
    versionCode 1
    versionName "1.0"

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

  }

  sourceSets {
    test.java.srcDirs += 'src/test/kotlin'

    main.java.srcDirs += 'src/main/kotlin'
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
}

task weave() {
  doLast {
    android.applicationVariants.all { variant ->
      println "tracklytics sample library variant"
      JavaCompile javaCompile = variant.javaCompile
      println "tracklytics sample javaCompile.doLast"
      String[] args = [
          "-showWeaveInfo",
          "-1.5",
          "-inpath", javaCompile.destinationDir.toString(),
          "-aspectpath", javaCompile.classpath.asPath,
          "-d", javaCompile.destinationDir.toString(),
          "-classpath", javaCompile.classpath.asPath,
          "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)
      ]

      MessageHandler handler = new MessageHandler(true);
      new Main().run(args, handler)

      def log = project.logger
      for (IMessage message : handler.getMessages(null, true)) {
        switch (message.getKind()) {
          case IMessage.ABORT:
          case IMessage.ERROR:
          case IMessage.FAIL:
            log.error message.message, message.thrown
            break;
          case IMessage.WARNING:
          case IMessage.INFO:
            log.info message.message, message.thrown
            break;
          case IMessage.DEBUG:
            log.debug message.message, message.thrown
            break;
        }
      }
    }
  }
}

afterEvaluate {
  tasks.findByPath("assembleDebug").doLast {
    tasks.findByPath("weave").execute()
  }
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])
  androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
    exclude group: 'com.android.support', module: 'support-annotations'
  })
  compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'
  testCompile 'junit:junit:4.12'

  compile "org.jetbrains.kotlin:kotlin-stdlib:1.1.0"
}
